(set! all-tests '())

(load "src/test-driver.scm")
(load "src/test/tests-1.1-req.scm")
(load "src/test/tests-1.2-req.scm")

(define non-fixnum-immediates
  '(
    (#t . #x6F)
    (#f . #x2F)
    (() . #x3F)
    (#\tab . #x9F)
    (#\lf . #xAF)
    (#\cr . #xDF)
    (#\space . #x20F)
    (#\! . #x21F)
    (#\" . #x22F)
    (#\# . #x23F)
    (#\$ . #x24F)
    (#\% . #x25F)
    (#\& . #x26F)
    (#\' . #x27F)
    (#\( . #x28F)
    (#\) . #x29F)
    (#\* . #x2AF)
    (#\+ . #x2BF)
    (#\, . #x2CF)
    (#\- . #x2DF)
    (#\. . #x2EF)
    (#\/ . #x2FF)
    (#\0 . #x30F)
    (#\1 . #x31F)
    (#\2 . #x32F)
    (#\3 . #x33F)
    (#\4 . #x34F)
    (#\5 . #x35F)
    (#\6 . #x36F)
    (#\7 . #x37F)
    (#\8 . #x38F)
    (#\9 . #x39F)
    (#\: . #x3AF)
    (#\; . #x3BF)
    (#\< . #x3CF)
    (#\= . #x3DF)
    (#\> . #x3EF)
    (#\? . #x3FF)
    (#\@ . #x40F)
    (#\A . #x41F)
    (#\B . #x42F)
    (#\C . #x43F)
    (#\D . #x44F)
    (#\E . #x45F)
    (#\F . #x46F)
    (#\G . #x47F)
    (#\H . #x48F)
    (#\I . #x49F)
    (#\J . #x4AF)
    (#\K . #x4BF)
    (#\L . #x4CF)
    (#\M . #x4DF)
    (#\N . #x4EF)
    (#\O . #x4FF)
    (#\P . #x50F)
    (#\Q . #x51F)
    (#\R . #x52F)
    (#\S . #x53F)
    (#\T . #x54F)
    (#\U . #x55F)
    (#\V . #x56F)
    (#\W . #x57F)
    (#\X . #x58F)
    (#\Y . #x59F)
    (#\Z . #x5AF)
    (#\[ . #x5BF)
    (#\\ . #x5CF)
    (#\] . #x5DF)
    (#\^ . #x5EF)
    (#\_ . #x5FF)
    (#\` . #x60F)
    (#\a . #x61F)
    (#\b . #x62F)
    (#\c . #x63F)
    (#\d . #x64F)
    (#\e . #x65F)
    (#\f . #x66F)
    (#\g . #x67F)
    (#\h . #x68F)
    (#\i . #x69F)
    (#\j . #x6AF)
    (#\k . #x6BF)
    (#\l . #x6CF)
    (#\m . #x6DF)
    (#\n . #x6EF)
    (#\o . #x6FF)
    (#\p . #x70F)
    (#\q . #x71F)
    (#\r . #x72F)
    (#\s . #x73F)
    (#\t . #x74F)
    (#\u . #x75F)
    (#\v . #x76F)
    (#\w . #x77F)
    (#\x . #x78F)
    (#\y . #x79F)
    (#\z . #x7AF)
    (#\{ . #x7BF)
    (#\| . #x7CF)
    (#\} . #x7DF)
    (#\~ . #x7EF)
    ))

(define (non-fixnum-immediate? x)
  (in? x (map (lambda (x) (car x)) non-fixnum-immediates)))

(define supported-types
  (list
   integer?
   non-fixnum-immediate?))

(define (immediate-rep x)
  (let
      ((fxshift 2))
    (cond
     ((integer? x)
      (ash x fxshift))
     ((non-fixnum-immediate? x)
      (cdr (assoc x non-fixnum-immediates)))
     (else (error 'immediate-rep "Unknown type" x)))))

;; Verifies whether element e exists in list l.
;; Returns #t if e is found, #f otherwise.
;; Example: (in? #\! (list #\space #\!))
(define (in? e l)
  (cond
   ((null? l) #f)
   ((eq? e (car l)) #t)
   (else (in? e (cdr l)))))

;; ORs a list l of booleans.
;; Example: (or-l (list #t #f)).
(define (or-l l)
  (in? #t l))

(define (compile-program x)
  (unless (or-l (map (lambda (f) (f x)) supported-types))
    (error 'compile-program "Unsupported operation." x))
  (emit "      .globl  _scheme_entry")
  (emit "      .p2align    4, 0x90")
  (emit "  _scheme_entry:")
  (emit "       .cfi_startproc")
  (emit "      movl    $~s, %eax" (immediate-rep x))
  (emit "      retq")
  (emit "      .cfi_endproc"))

(test-all)

